require=function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({"/src/HexAgentRandom.js":[function(require,module,exports){const Agent=require("ai-agents").Agent;const getEmptyHex=require("./getEmptyHex");class HexAgent extends Agent{constructor(value){super(value)}send(){let board=this.perception;let size=board.length;let available=getEmptyHex(board);let nTurn=size*size-available.length;let ava=available[Math.round(Math.random()*(available.length-1))];let move=[Math.floor(ava/board.length),ava%board.length];return move}}module.exports=HexAgent},{"./getEmptyHex":5,"ai-agents":4}],1:[function(require,module,exports){class Agent{constructor(name){this.id=name;if(!name){this.id=Math.round(Math.random()*1e9)}this.state=null;this.perception=null;this.table={default:0}}setup(initialState={}){this.initialState=initialState}receive(inputs){this.perception=inputs}send(){return this.table["deafult"]}getLocalName(){return this.id}getID(){return this.id}stop(){}}module.exports=Agent},{}],2:[function(require,module,exports){class AgentController{constructor(){this.agents={};this.world0=null;this.actions=[];this.data={states:{},world:{}}}setup(parameter){this.problem=parameter.problem;this.world0=JSON.parse(JSON.stringify(parameter.world));this.data.world=JSON.parse(JSON.stringify(parameter.world))}register(agent,state0){if(this.agents[agent.getID()]){throw"AgentIDAlreadyExists"}else{this.agents[agent.getID()]=agent;this.data.states[agent.getID()]=state0;agent.setup(state0)}}unregister(input){let id="";if(typeof input=="string"){id=input}else if(typeof input=="object"){id=input.getID()}else{throw"InvalidAgentType"}let agent=this.agents[id];agent.stop();delete this.agents[id]}start(callbacks,interactive=false){this.callbacks=callbacks;this.currentAgentIndex=0;if(interactive===false){this.loop();return null}else{return this}}next(){if(!this.problem.goalTest(this.data)){let keys=Object.keys(this.agents);let agent=this.agents[keys[this.currentAgentIndex]];agent.receive(this.problem.perceptionForAgent(this.getData(),agent.getID()));let action=agent.send();this.actions.push({agentID:agent.getID(),action:action});this.problem.update(this.data,action,agent.getID());if(this.problem.goalTest(this.data)){this.finishAll();return false}else{if(this.callbacks.onTurn){this.callbacks.onTurn({actions:this.getActions(),data:JSON.parse(JSON.stringify(this.data))})}if(this.currentAgentIndex>=keys.length-1)this.currentAgentIndex=0;else this.currentAgentIndex++;return true}}}loop(){let stop=false;while(!stop){Object.values(this.agents).forEach(agent=>{if(!this.problem.goalTest(this.data)){agent.receive(this.problem.perceptionForAgent(this.getData(),agent.getID()));let action=agent.send();this.actions.push({agentID:agent.getID(),action:action});this.problem.update(this.data,action,agent.getID());if(this.problem.goalTest(this.data)){stop=true}else{if(this.callbacks.onTurn)this.callbacks.onTurn({actions:this.getActions(),data:this.data})}}})}this.finishAll()}finishAll(){Object.values(this.agents).forEach(agent=>{this.unregister(agent)});if(this.callbacks.onFinish)this.callbacks.onFinish({actions:this.getActions(),data:this.data})}getData(){return this.data}getActions(){return JSON.parse(JSON.stringify(this.actions))}stop(){this.finishAll()}}module.exports=AgentController},{}],3:[function(require,module,exports){const AgentController=require("../core/AgentController");class Problem{constructor(initialState){this.controller=new AgentController}goalTest(solution){}update(data,action,agentID){}perceptionForAgent(data,agentID){}addAgent(agentID,agentClass,initialState){let agent=new agentClass(agentID);this.controller.register(agent,initialState)}solve(world,callbacks){this.controller.setup({world:world,problem:this});this.controller.start(callbacks,false)}interactiveSolve(world,callbacks){this.controller.setup({world:world,problem:this});return this.controller.start(callbacks,true)}}module.exports=Problem},{"../core/AgentController":2}],4:[function(require,module,exports){const Problem=require("./core/Problem");const Agent=require("./core/Agent");const AgentController=require("./core/AgentController");module.exports={Problem:Problem,Agent:Agent,AgentController:AgentController}},{"./core/Agent":1,"./core/AgentController":2,"./core/Problem":3}],5:[function(require,module,exports){function getEmptyHex(board){let result=[];let size=board.length;for(let k=0;k<size;k++){for(let j=0;j<size;j++){if(board[k][j]===0){result.push(k*size+j)}}}return result}module.exports=getEmptyHex},{}]},{},[]);
